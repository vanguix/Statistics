## pool the results together for visualization:
alldata <- rbind(res.SCDC.seger$meltdata, res.SCDC.baron$meltdata)
allpvalue <- rbind(res.SCDC.seger$pvaldata, res.SCDC.baron$pvaldata)
demopval <- rbind(res.SCDC.seger$demo_pval, res.SCDC.baron$demo_pval)
alldata$method <- as.factor(alldata$method)
## SCDC deconvolution using one ref dataset:
fadista.seger <- SCDC_prop(fadista_77, seger, ct.varname = "cell_type1", sample = "sample",
ct.sub = c("alpha","beta","delta","gamma"))
fadista.baron <- SCDC_prop(fadista_77, baron, ct.varname = "assigned_cluster", sample = "sample",
ct.sub = c("alpha","beta","delta","gamma"))
#write.table(fadista.seger$prop.est.mvw,
#'C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\SCDC\\SCDC_prop_fadista_seger.csv',sep=',')
#write.table(fadista.seger$basis.mvw,
#'C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\SCDC\\SCDC_basis_fadista_seger.csv',sep=',')
#write.table(fadista.seger$yhat,
#'C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\SCDC\\yhat_fadista_seger.csv',sep=',')
#write.table(fadista.baron$prop.est.mvw,
#'C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\SCDC\\SCDC_prop_fadista_baron.csv',sep=',')
#write.table(fadista.baron$basis.mvw,
#'C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\SCDC\\SCDC_basis_fadista_baron.csv',sep=',')
#write.table(fadista.baron$yhat,
#'C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\SCDC\\yhat_fadista_baron.csv',sep=',')
## get demographic information of the bulk samples from Fadista et al.
fadista_demo <- fadista_77@phenoData@data[,c("age","gender","hba1c","bmi","hba1c_class2")]
## the following getLMpValue() function is to perform the linear regression and wrap the linear model results
getLMpValue <- function(prop_est, method_){
prop_est_all <- cbind(prop_est, fadista_demo[rownames(prop_est),])
getlmtable <- function(ct){
prop_est_all$ct <- prop_est_all[,ct]
lm.ens1 <- lm(ct ~ hba1c + age + bmi + gender, data = prop_est_all)
s1 <- summary(lm.ens1)
sdt <- cbind(round(s1$coefficients,4), celltype = rep(ct,5))
return(sdt)
}
dtlm <- NULL
for (ct in intersect(c("alpha","beta","delta","gamma"),
colnames(prop_est))){
dtlm0 <- getlmtable(ct)
dtlm <- rbind(dtlm, dtlm0)
}
dat_text_fad <- data.frame(label = paste("p-value =",dtlm[seq(from = 2 , to = 27, by=5),c(4)]),
variable = dtlm[seq(from = 2 , to = 27, by=5),c(5)],
hba1c = 6, value = 0.5,
condition = "T2D",
method = method_)
demo_pval <- data.frame(label = paste("p-value =",dtlm[,c(4)]),
variable = dtlm[,c(5)],
value = 0.5,
covar =rownames(dtlm),
condition = "T2D",
method = method_)
dtmelt <- melt(prop_est_all, id.vars = c("hba1c_class2","age","gender","bmi","hba1c"), measure.vars = c("alpha","beta","delta","gamma"))
dtmelt$method <- method_
return(list(meltdata = dtmelt, pvaldata = dat_text_fad, demo_pval = demo_pval))
}
res.SCDC.seger <- getLMpValue(prop_est = fadista.seger$prop.est.mvw, method_ = "SCDC+Segerstolpe")
res.SCDC.baron <- getLMpValue(prop_est = fadista.baron$prop.est.mvw, method_ = "SCDC+Baron")
## pool the results together for visualization:
alldata <- rbind(res.SCDC.seger$meltdata, res.SCDC.baron$meltdata)
allpvalue <- rbind(res.SCDC.seger$pvaldata, res.SCDC.baron$pvaldata)
demopval <- rbind(res.SCDC.seger$demo_pval, res.SCDC.baron$demo_pval)
alldata$method <- as.factor(alldata$method)
library(SCDC)
library(Biobase)
library(gsubfn)
library(dplyr)
library(reshape2)
library(ggplot2)
P_TAPE_fadista_baron_csv= read.csv("C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\TAPE\\TAPE_Pred_Fadista_Baron.csv", sep=',')
P_TAPE_fadista_seger_csv= read.csv("C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\TAPE\\TAPE_Pred_Fadista_Seger.csv", sep=',')
fadista_77 <- readRDS("C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Data\\Pancreaic islets (from SCDC)\\fadista_77.rds")
#filtering colum X as index
rownames(P_TAPE_fadista_baron_csv)<- P_TAPE_fadista_baron_csv$X
P_TAPE_fadista_baron_csv$X<-NULL
rownames(P_TAPE_fadista_seger_csv)<- P_TAPE_fadista_seger_csv$X
P_TAPE_fadista_seger_csv$X<-NULL
#from df to matrix
P_TAPE_fadista_baron= as.matrix(P_TAPE_fadista_baron_csv)
P_TAPE_fadista_seger= as.matrix(P_TAPE_fadista_seger_csv)
## get demographic information of the bulk samples from Fadista et al.
fadista_demo <- fadista_77@phenoData@data[,c("age","gender","hba1c","bmi","hba1c_class2")]
## the following getLMpValue() function is to perform the linear regression and wrap the linear model results
getLMpValue <- function(prop_est, method_){
prop_est_all <- cbind(prop_est, fadista_demo[rownames(prop_est),])
getlmtable <- function(ct){
prop_est_all$ct <- prop_est_all[,ct]
lm.ens1 <- lm(ct ~ hba1c + age + bmi + gender, data = prop_est_all)
s1 <- summary(lm.ens1)
sdt <- cbind(round(s1$coefficients,4), celltype = rep(ct,5))
return(sdt)
}
dtlm <- NULL
for (ct in intersect(c("alpha","beta","delta","gamma","acinar","ductal"),
colnames(prop_est))){
dtlm0 <- getlmtable(ct)
dtlm <- rbind(dtlm, dtlm0)
}
dat_text_fad <- data.frame(label = paste("p-value =",dtlm[seq(from = 2 , to = 27, by=5),c(4)]),
variable = dtlm[seq(from = 2 , to = 27, by=5),c(5)],
hba1c = 6, value = 0.5,
condition = "T2D",
method = method_)
demo_pval <- data.frame(label = paste("p-value =",dtlm[,c(4)]),
variable = dtlm[,c(5)],
value = 0.5,
covar =rownames(dtlm),
condition = "T2D",
method = method_)
dtmelt <- melt(prop_est_all, id.vars = c("hba1c_class2","age","gender","bmi","hba1c"), measure.vars = c("alpha","beta","delta","gamma","acinar","ductal"))
dtmelt$method <- method_
return(list(meltdata = dtmelt, pvaldata = dat_text_fad, demo_pval = demo_pval))
}
res.TAPE.seger <- getLMpValue(prop_est = P_TAPE_fadista_seger, method_ = "TAPE+Segerstolpe")
res.TAPE.baron <- getLMpValue(prop_est = P_TAPE_fadista_baron, method_ = "TAPE+Baron")
## pool the results together for visualization:
alldata <- rbind(res.TAPE.seger$meltdata, res.TAPE.baron$meltdata)
allpvalue <- rbind(res.TAPE.seger$pvaldata, res.TAPE.baron$pvaldata)
demopval <- rbind(res.TAPE.seger$demo_pval, res.TAPE.baron$demo_pval)
alldata$method <- as.factor(alldata$method)
fadista.LMplot <- ggplot(alldata[alldata$variable %in% c("beta"),], aes(x=hba1c, y= value)) + geom_point(aes(color = hba1c_class2)) +
geom_smooth(method='lm', se = FALSE, color = "black", lwd = 0.25) +
theme(legend.position = "top", legend.title = element_blank(), # axis.title.x = element_blank(),
legend.box.spacing = unit(0, "mm"),
text = element_text(size=9),
axis.text.x = element_text(size=9),
axis.text.y = element_text(size=9))+#, axis.title.y = element_blank()) +
facet_grid(cols = vars(factor(method, levels = c("TAPE+Baron", "TAPE+Segerstolpe"))),scales = "free") +
geom_text(data = allpvalue[allpvalue$variable %in% c("beta"),],
mapping = aes(x=5.5, y=0.85,label = label),
hjust   = 0.2, vjust   = 0, size = 2.5) +
xlab("HbA1c") + ylab("Proportions") + ylim(c(0,1))
fadista.LMplot
P_TAPE_fadista_baron_csv= read.csv("C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\TAPE\\TAPE_Pred_Fadista_Baron_8.csv", sep=',')
P_TAPE_fadista_seger_csv= read.csv("C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Results\\Real data\\TAPE\\TAPE_Pred_Fadista_Seger_8.csv", sep=',')
fadista_77 <- readRDS("C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\TFG Victoria\\Data\\Pancreaic islets (from SCDC)\\fadista_77.rds")
#filtering colum X as index
rownames(P_TAPE_fadista_baron_csv)<- P_TAPE_fadista_baron_csv$X
P_TAPE_fadista_baron_csv$X<-NULL
rownames(P_TAPE_fadista_seger_csv)<- P_TAPE_fadista_seger_csv$X
P_TAPE_fadista_seger_csv$X<-NULL
#from df to matrix
P_TAPE_fadista_baron= as.matrix(P_TAPE_fadista_baron_csv)
P_TAPE_fadista_seger= as.matrix(P_TAPE_fadista_seger_csv)
## get demographic information of the bulk samples from Fadista et al.
fadista_demo <- fadista_77@phenoData@data[,c("age","gender","hba1c","bmi","hba1c_class2")]
## the following getLMpValue() function is to perform the linear regression and wrap the linear model results
getLMpValue <- function(prop_est, method_){
prop_est_all <- cbind(prop_est, fadista_demo[rownames(prop_est),])
getlmtable <- function(ct){
prop_est_all$ct <- prop_est_all[,ct]
lm.ens1 <- lm(ct ~ hba1c + age + bmi + gender, data = prop_est_all)
s1 <- summary(lm.ens1)
sdt <- cbind(round(s1$coefficients,4), celltype = rep(ct,5))
return(sdt)
}
dtlm <- NULL
for (ct in intersect(c("alpha","beta","delta","gamma","acinar","ductal", "epsilon", "endothelial"),
colnames(prop_est))){
dtlm0 <- getlmtable(ct)
dtlm <- rbind(dtlm, dtlm0)
}
dat_text_fad <- data.frame(label = paste("p-value =",dtlm[seq(from = 2 , to = 27, by=5),c(4)]),
variable = dtlm[seq(from = 2 , to = 27, by=5),c(5)],
hba1c = 6, value = 0.5,
condition = "T2D",
method = method_)
demo_pval <- data.frame(label = paste("p-value =",dtlm[,c(4)]),
variable = dtlm[,c(5)],
value = 0.5,
covar =rownames(dtlm),
condition = "T2D",
method = method_)
dtmelt <- melt(prop_est_all, id.vars = c("hba1c_class2","age","gender","bmi","hba1c"), measure.vars = c("alpha","beta","delta","gamma","acinar","ductal", "epsilon", "endothelial"))
dtmelt$method <- method_
return(list(meltdata = dtmelt, pvaldata = dat_text_fad, demo_pval = demo_pval))
}
res.TAPE.seger <- getLMpValue(prop_est = P_TAPE_fadista_seger, method_ = "TAPE+Segerstolpe")
res.TAPE.baron <- getLMpValue(prop_est = P_TAPE_fadista_baron, method_ = "TAPE+Baron")
## pool the results together for visualization:
alldata <- rbind(res.TAPE.seger$meltdata, res.TAPE.baron$meltdata)
allpvalue <- rbind(res.TAPE.seger$pvaldata, res.TAPE.baron$pvaldata)
demopval <- rbind(res.TAPE.seger$demo_pval, res.TAPE.baron$demo_pval)
alldata$method <- as.factor(alldata$method)
fadista.LMplot <- ggplot(alldata[alldata$variable %in% c("beta"),], aes(x=hba1c, y= value)) + geom_point(aes(color = hba1c_class2)) +
geom_smooth(method='lm', se = FALSE, color = "black", lwd = 0.25) +
theme(legend.position = "top", legend.title = element_blank(), # axis.title.x = element_blank(),
legend.box.spacing = unit(0, "mm"),
text = element_text(size=9),
axis.text.x = element_text(size=9),
axis.text.y = element_text(size=9))+#, axis.title.y = element_blank()) +
facet_grid(cols = vars(factor(method, levels = c("TAPE+Baron", "TAPE+Segerstolpe"))),scales = "free") +
geom_text(data = allpvalue[allpvalue$variable %in% c("beta"),],
mapping = aes(x=5.5, y=0.85,label = label),
hjust   = 0.2, vjust   = 0, size = 2.5) +
xlab("HbA1c") + ylab("Proportions") + ylim(c(0,1))
fadista.LMplot
#hypotheses with the information from the survey.
library("RColorBrewer")
setwd("C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\Escritorio\\MASTER\\Statistics for data analysis\\Project\\Statistics")
survey = read.csv("SPORTS_SURVEY.csv",sep = ";", dec = ",")
attach(survey)
names(survey)
## DESCRIPTIVE ANALYSIS
#Q1. What is your date of birth?
dev.new()
hist(AGE, freq = F, col=brewer.pal(n = 7, name = "Paired"))
mean(AGE)
age_mean= mean(AGE)
age_var = var(AGE)
age_mean
age_var
?VAR()
?var()
dev.new()
barplot(table(Num_sports),main = "Number of different sports",
xlab = "Number of sports",
ylab = "Frequency", col=brewer.pal(n = 4, name = "Paired") )
barplot(table(N_SPORTS),main = "Number of different sports",
xlab = "Number of sports",
ylab = "Frequency", col=brewer.pal(n = 4, name = "Paired") )
dev.new()
hist(AGE, freq = F, col='ligthblue')
dev.new()
hist(AGE, freq = F, col=brewer.pal(name = "deepskyblue3"))
hist(AGE, freq = F, col=brewer.pal(n=7, name = "deepskyblue3"))
hist(AGE, freq = F, col= name = "deepskyblue3")
hist(AGE, freq = F, col= "deepskyblue3")
dev.new()
hist(AGE, freq = F, col= "deepskyblue3")
barplot(table(N_SPORTS),main = "Number of different sports",
xlab = "Number of sports",
ylab = "Frequency", col=brewer.pal(n = 4, name = "Paired") )
dev.new()
hist(MINUTES, freq = F, col= "deepskyblue3")
library(fitdistrplus)
fit_MM_gamma = fitdist(MINUTES,"gamma",method="mme")
fit_MM_gamma$estimate
df_survey = data.frame(survey)
df_nonzero = df1[apply(df_survey,1, function(x) all(x!=0)),]
df_nonzero = df_survey[apply(df_survey,1, function(x) all(x!=0)),]
View(df_nonzero)
fit_MM_exp = fitdist(df_nonzero[MINUTES],"exp",method="mme")
fit_MM_exp = fitdist(df_nonzero["MINUTES"],"exp",method="mme")
fit_MM_exp = fitdist(df_nonzero[,"MINUTES"],"exp",method="mme")
MINUTES_NZ= df_nonzero[,"MINUTES"]
hist(MINUTES_NZ, freq = F, col= "deepskyblue3"
)
#Fit by MM
fit_MM_exp = fitdist(MINUTES_NZ,"exp",method="mme")
fit_MM_lnorm = fitdist(MINUTES_NZ,"lnorm",method="mme")
df_survey = data.frame(survey)
df_nonzero = df_survey[apply(df_survey,1, function(x) all(x!=0)),]
MINUTES_NZ= df_nonzero[,"MINUTES"]
hist(MINUTES_NZ, freq = F, col= "deepskyblue3")
#Fit by MM
fit_MM_exp = fitdist(MINUTES_NZ,"exp",method="mme")
fit_MM_lnorm = fitdist(MINUTES_NZ,"lnorm",method="mme")
View(df_nonzero)
View(df_survey)
setwd("C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\Escritorio\\MASTER\\Statistics for data analysis\\Project\\Statistics")
survey = read.csv("SPORTS_SURVEY.csv",sep = ";", dec = ",")
attach(survey)
names(survey)
df_survey = data.frame(survey)
df_nonzero = df_survey[apply(df_survey,1, function(x) all(x!=0)),]
View(df_nonzero)
DF_PRUEBA= df_survey[apply(df_survey,1, function(x) all(x!=0)),]
DF = DF_PRUEBA[apply(DF_PRUEBA,1 , function(x) all(x!=0)),]
df_nonzero = apply(df_survey,1, function(x) all(x!=0))
df_nonzero = df_survey[apply(df_survey,1, function(x) all(x!=0)),]
#Using statistical methods and clear visual representations, the aim is to present
#a comprehensive view of sports engagement and to confirm or dismiss the previous
#hypotheses with the information from the survey.
library("RColorBrewer")
library(fitdistrplus)
setwd("C:\\Users\\victoria\\OneDrive - Universidad Rey Juan Carlos\\Escritorio\\MASTER\\Statistics for data analysis\\Project\\Statistics")
survey = read.csv("SPORTS_SURVEY.csv",sep = ";", dec = ",")
attach(survey)
names(survey)
## DESCRIPTIVE ANALYSIS: some plots of the data (rest were obtained from Google survey)
#Q1. What is your date of birth?
dev.new()
hist(AGE, freq = F, col= "deepskyblue3")
age_mean= mean(AGE)
age_var = var(AGE)
age_mean
age_var
#Q4. How many types of sports do you practice on a monthly basis?
dev.new()
barplot(table(N_SPORTS),main = "Number of different sports",
xlab = "Number of sports",
ylab = "Frequency", col=brewer.pal(n = 4, name = "Paired") )
#Q6. How many minutes did you spend practicing sports last week?
dev.new()
hist(MINUTES, freq = F, col= "deepskyblue3")
##MODEL FITTING
df_survey = data.frame(survey)
df_nonzero = df_survey[apply(df_survey,1, function(x) all(x!=0)),]
View(df_nonzero)
df_nonzero = df_survey[df_survey$MINUTES != 0, , drop = FALSE]
View(df_survey)
View(df_nonzero)
MINUTES_NZ= df_nonzero[,"MINUTES"]
hist(MINUTES_NZ, freq = F, col= "deepskyblue3")
#Fit by MM
fit_MM_exp = fitdist(MINUTES_NZ,"exp",method="mme")
fit_MM_lnorm = fitdist(MINUTES_NZ,"lnorm",method="mme")
fit_MM_gamma = fitdist(MINUTES_NZ,"gamma",method="mme")
fit_MM_exp$estimate
fit_MM_lnorm$estimate
fit_MM_gamma$estimate
fit_MLE_exp = fitdist(MINUTES_NZ,"exp",method="mle")
fit_MLE_lnorm = fitdist(MINUTES_NZ,"lnorm",method="mle")
fit_MLE_gamma = fitdist(MINUTES_NZ,"gamma",method="mle")
fit_MLE_exp$estimate
fit_MLE_lnorm$estimate
fit_MLE_gamma$estimate
hist(MINUTES_NZ, freq = F, col='white')
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "blue", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "red", add = TRUE, lty = 4)
legend("topleft",c("MM","MLE"),col=c("blue","red"),lty=c(1,4))
hist(MINUTES_NZ, freq = F, col='white',title='Exponential fitting')
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "blue", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "red", add = TRUE, lty = 4)
legend("topleft",c("MM","MLE"),col=c("blue","red"),lty=c(1,4))
hist(MINUTES_NZ, freq = F, col='white',main='Exponential fitting')
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "blue", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "red", add = TRUE, lty = 4)
legend("topleft",c("MM","MLE"),col=c("blue","red"),lty=c(1,4))
fit_MM_exp$aic
fit_MM_lnorm$aic
fit_MM_gamma$aic
fit_MLE_exp$aic
fit_MLE_lnorm$aic
fit_MLE_gamma$aic
dev.new()
hist(MINUTES_NZ, freq = F, col='white',main='Distribution fitting')
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "red", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 4)
grid=seq(0,1400,1)
lines(grid,dlnorm(grid,fit_MM_lnorm$estimate[1],fit_MM_lnorm$estimate[2]),col= 'pink')
lines(grid,dlnorm(grid,fit_MLE_lnorm$estimate[1],fit_MLE_lnorm$estimate[2]),col='aquamarine')
lines(grid,dgamma(grid,fit_MM_gamma$estimate[1],fit_MM_gamma$estimate[2]),col="deeppink")
lines(grid,dgamma(grid,fit_MLE_gamma$estimate[1],fit_MLE_gamma$estimate[2]),col="chartreuse3")
legend("topleft",c("MM exp","MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"),col=c("red","blue",'pink', 'aquamarine', 'deeppink', 'chartreuse3'),lty=c(1,4,1,1,1,1))
legend("toprigth",c("MM exp","MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"),col=c("red","blue",'pink', 'aquamarine', 'deeppink', 'chartreuse3'),lty=c(1,4,1,1,1,1))
dev.new()
hist(MINUTES_NZ, freq = F, col='white',main='Distribution fitting')
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "red", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 4)
grid=seq(0,1400,1)
lines(grid,dlnorm(grid,fit_MM_lnorm$estimate[1],fit_MM_lnorm$estimate[2]),col= 'pink')
lines(grid,dlnorm(grid,fit_MLE_lnorm$estimate[1],fit_MLE_lnorm$estimate[2]),col='aquamarine')
lines(grid,dgamma(grid,fit_MM_gamma$estimate[1],fit_MM_gamma$estimate[2]),col="deeppink")
lines(grid,dgamma(grid,fit_MLE_gamma$estimate[1],fit_MLE_gamma$estimate[2]),col="chartreuse3")
legend("toprigth",c("MM exp","MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"),col=c("red","blue",'pink', 'aquamarine', 'deeppink', 'chartreuse3'),lty=c(1,4,1,1,1,1))
dev.new()
hist(MINUTES_NZ, freq = F, col='white',main='Distribution fitting')
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "red", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 4)
grid=seq(0,1400,1)
lines(grid,dlnorm(grid,fit_MM_lnorm$estimate[1],fit_MM_lnorm$estimate[2]),col= 'pink')
lines(grid,dlnorm(grid,fit_MLE_lnorm$estimate[1],fit_MLE_lnorm$estimate[2]),col='aquamarine')
lines(grid,dgamma(grid,fit_MM_gamma$estimate[1],fit_MM_gamma$estimate[2]),col="deeppink")
lines(grid,dgamma(grid,fit_MLE_gamma$estimate[1],fit_MLE_gamma$estimate[2]),col="chartreuse3")
legend("topright",c("MM exp","MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"),col=c("red","blue",'pink', 'aquamarine', 'deeppink', 'chartreuse3'),lty=c(1,4,1,1,1,1))
dev.new()
hist(MINUTES_NZ, freq = F, col='white',main='Distribution fitting')
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "red", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 4)
grid=seq(0,1400,1)
lines(grid,dlnorm(grid,fit_MM_lnorm$estimate[1],fit_MM_lnorm$estimate[2]),col= 'pink')
lines(grid,dlnorm(grid,fit_MLE_lnorm$estimate[1],fit_MLE_lnorm$estimate[2]),col='aquamarine')
lines(grid,dgamma(grid,fit_MM_gamma$estimate[1],fit_MM_gamma$estimate[2]),col="deeppink")
lines(grid,dgamma(grid,fit_MLE_gamma$estimate[1],fit_MLE_gamma$estimate[2]),col="chartreuse3", lty=4)
legend("topright",c("MM exp","MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"),col=c("red","blue",'pink', 'aquamarine', 'deeppink', 'chartreuse3'),lty=c(1,4,1,1,1,4))
#Plot all together
dev.new()
hist(MINUTES_NZ, freq = F, col='white',main='Distribution fitting')
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "red", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2)
grid=seq(0,1400,1)
lines(grid,dlnorm(grid,fit_MM_lnorm$estimate[1],fit_MM_lnorm$estimate[2]),col= 'pink')
lines(grid,dlnorm(grid,fit_MLE_lnorm$estimate[1],fit_MLE_lnorm$estimate[2]),col='aquamarine')
lines(grid,dgamma(grid,fit_MM_gamma$estimate[1],fit_MM_gamma$estimate[2]),col="deeppink")
lines(grid,dgamma(grid,fit_MLE_gamma$estimate[1],fit_MLE_gamma$estimate[2]),col="chartreuse3", lty=2)
legend("topright",c("MM exp","MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"),col=c("red","blue",'pink', 'aquamarine', 'deeppink', 'chartreuse3'),lty=c(1,2,1,1,1,2))
dev.new()
hist(MINUTES_NZ, freq = F, col='white',main='Distribution fitting',ylim= 0.5)
dev.new()
hist(MINUTES_NZ, freq = F, col='white',main='Distribution fitting',ylim= '0.5')
#Plot all together
dev.new()
hist(MINUTES_NZ, freq = F, col='white',main='Distribution fitting',ylim= c(0, 0.5))
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "red", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2)
grid=seq(0,1400,1)
lines(grid,dlnorm(grid,fit_MM_lnorm$estimate[1],fit_MM_lnorm$estimate[2]),col= 'pink')
lines(grid,dlnorm(grid,fit_MLE_lnorm$estimate[1],fit_MLE_lnorm$estimate[2]),col='aquamarine')
lines(grid,dgamma(grid,fit_MM_gamma$estimate[1],fit_MM_gamma$estimate[2]),col="deeppink")
lines(grid,dgamma(grid,fit_MLE_gamma$estimate[1],fit_MLE_gamma$estimate[2]),col="chartreuse3", lty=2)
legend("topright",c("MM exp","MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"),col=c("red","blue",'pink', 'aquamarine', 'deeppink', 'chartreuse3'),lty=c(1,2,1,1,1,2))
#Plot all together
dev.new()
hist(MINUTES_NZ, freq = F, col='white',main='Distribution fitting',ylim= c(0, 0.005))
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0,col= "red", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2)
grid=seq(0,1400,1)
lines(grid,dlnorm(grid,fit_MM_lnorm$estimate[1],fit_MM_lnorm$estimate[2]),col= 'pink')
lines(grid,dlnorm(grid,fit_MLE_lnorm$estimate[1],fit_MLE_lnorm$estimate[2]),col='aquamarine')
lines(grid,dgamma(grid,fit_MM_gamma$estimate[1],fit_MM_gamma$estimate[2]),col="deeppink")
lines(grid,dgamma(grid,fit_MLE_gamma$estimate[1],fit_MLE_gamma$estimate[2]),col="chartreuse3", lty=2)
legend("topright",c("MM exp","MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"),col=c("red","blue",'pink', 'aquamarine', 'deeppink', 'chartreuse3'),lty=c(1,2,1,1,1,2))
dev.new()
hist(MINUTES_NZ, freq = FALSE, col = 'white', main = 'Distribution fitting', ylim = c(0, 0.004))
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0, col = "red", add = TRUE)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2)
grid <- seq(0, 1400, 1)
lines(grid, dlnorm(grid, fit_MM_lnorm$estimate[1], fit_MM_lnorm$estimate[2]), col = 'blueviolet', lwd = 2)
lines(grid, dlnorm(grid, fit_MLE_lnorm$estimate[1], fit_MLE_lnorm$estimate[2]), col = 'cyan4', lwd = 2)
lines(grid, dgamma(grid, fit_MM_gamma$estimate[1], fit_MM_gamma$estimate[2]), col = "deeppink", lwd = 2)
lines(grid, dgamma(grid, fit_MLE_gamma$estimate[1], fit_MLE_gamma$estimate[2]), col = "chartreuse3", lty = 2, lwd = 2)
legend("topright", c("MM exp", "MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"), col = c("red", "blue", 'blueviolet', 'cyan4', 'deeppink', 'chartreuse3'), lty = c(1, 2, 1, 1, 1, 2), lwd = 2)  # Ajusta el grosor a 2
hist(MINUTES_NZ, freq = FALSE, col = 'white', main = 'Distribution fitting', ylim = c(0, 0.004))
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0, col = "red", add = TRUE,lwd = 1.5)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2,lwd = 2)
grid <- seq(0, 1400, 1)
lines(grid, dlnorm(grid, fit_MM_lnorm$estimate[1], fit_MM_lnorm$estimate[2]), col = 'blueviolet', lwd = 2)
lines(grid, dlnorm(grid, fit_MLE_lnorm$estimate[1], fit_MLE_lnorm$estimate[2]), col = 'cyan4', lwd = 2)
lines(grid, dgamma(grid, fit_MM_gamma$estimate[1], fit_MM_gamma$estimate[2]), col = "deeppink", lwd = 2)
lines(grid, dgamma(grid, fit_MLE_gamma$estimate[1], fit_MLE_gamma$estimate[2]), col = "chartreuse3", lty = 2, lwd = 2)
legend("topright", c("MM exp", "MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"), col = c("red", "blue", 'blueviolet', 'cyan4', 'deeppink', 'chartreuse3'), lty = c(1, 2, 1, 1, 1, 2), lwd = 2)  # Ajusta el grosor a 2
dev.new()
hist(MINUTES_NZ, freq = FALSE, col = 'white', main = 'Distribution fitting', ylim = c(0, 0.004))
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0, col = "red", add = TRUE,lwd = 1.5)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2,lwd = 1.5)
grid <- seq(0, 1400, 1)
lines(grid, dlnorm(grid, fit_MM_lnorm$estimate[1], fit_MM_lnorm$estimate[2]), col = 'blueviolet', lwd = 1.5)
lines(grid, dlnorm(grid, fit_MLE_lnorm$estimate[1], fit_MLE_lnorm$estimate[2]), col = 'cyan4', lwd = 1.5)
lines(grid, dgamma(grid, fit_MM_gamma$estimate[1], fit_MM_gamma$estimate[2]), col = "deeppink", lwd = 1.5)
lines(grid, dgamma(grid, fit_MLE_gamma$estimate[1], fit_MLE_gamma$estimate[2]), col = "chartreuse3", lty = 2, lwd = 1.5)
legend("topright", c("MM exp", "MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"), col = c("red", "blue", 'blueviolet', 'cyan4', 'deeppink', 'chartreuse3'), lty = c(1, 2, 1, 1, 1, 2), lwd = 2)  # Ajusta el grosor a 2
dev.new()
hist(MINUTES_NZ, freq = FALSE, col = 'white', main = 'Distribution fitting', ylim = c(0, 0.004))
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0, col = "red", add = TRUE,lwd = 2)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2,lwd = 2)
grid <- seq(0, 1400, 1)
lines(grid, dlnorm(grid, fit_MM_lnorm$estimate[1], fit_MM_lnorm$estimate[2]), col = 'blueviolet', lwd = 2)
lines(grid, dlnorm(grid, fit_MLE_lnorm$estimate[1], fit_MLE_lnorm$estimate[2]), col = 'cyan4', lwd = 2)
lines(grid, dgamma(grid, fit_MM_gamma$estimate[1], fit_MM_gamma$estimate[2]), col = "deeppink", lwd = 2)
lines(grid, dgamma(grid, fit_MLE_gamma$estimate[1], fit_MLE_gamma$estimate[2]), col = "chartreuse3", lty = 2, lwd = 2)
legend("topright", c("MM exp", "MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"), col = c("red", "blue", 'blueviolet', 'cyan4', 'deeppink', 'chartreuse3'), lty = c(1, 2, 1, 1, 1, 2), lwd = 2)  # Ajusta el grosor a 2
dev.new()
plot(ecdf(MINUTES_NZ))
curve(pexp(x, rate = fit_MM_exp$estimate), from = 0, col = "red", add = TRUE,lwd = 2)
curve(pexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2,lwd = 2)
lines(grid, plnorm(grid, fit_MM_lnorm$estimate[1], fit_MM_lnorm$estimate[2]), col = 'blueviolet', lwd = 2)
lines(grid, plnorm(grid, fit_MLE_lnorm$estimate[1], fit_MLE_lnorm$estimate[2]), col = 'cyan4', lwd = 2)
lines(grid, pgamma(grid, fit_MM_gamma$estimate[1], fit_MM_gamma$estimate[2]), col = "deeppink", lwd = 2)
lines(grid, pgamma(grid, fit_MLE_gamma$estimate[1], fit_MLE_gamma$estimate[2]), col = "chartreuse3", lty = 2, lwd = 2)
legend("topright", c("MM exp", "MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"), col = c("red", "blue", 'blueviolet', 'cyan4', 'deeppink', 'chartreuse3'), lty = c(1, 2, 1, 1, 1, 2), lwd = 2)  # Ajusta el grosor a 2
dev.new()
plot(ecdf(MINUTES_NZ))
curve(pexp(x, rate = fit_MM_exp$estimate), from = 0, col = "red", add = TRUE,lwd = 2)
curve(pexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2,lwd = 2)
lines(grid, plnorm(grid, fit_MM_lnorm$estimate[1], fit_MM_lnorm$estimate[2]), col = 'blueviolet', lwd = 2)
lines(grid, plnorm(grid, fit_MLE_lnorm$estimate[1], fit_MLE_lnorm$estimate[2]), col = 'cyan4', lwd = 2)
lines(grid, pgamma(grid, fit_MM_gamma$estimate[1], fit_MM_gamma$estimate[2]), col = "deeppink", lwd = 2)
lines(grid, pgamma(grid, fit_MLE_gamma$estimate[1], fit_MLE_gamma$estimate[2]), col = "chartreuse3", lty = 2, lwd = 2)
legend("topleft", c("MM exp", "MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"), col = c("red", "blue", 'blueviolet', 'cyan4', 'deeppink', 'chartreuse3'), lty = c(1, 2, 1, 1, 1, 2), lwd = 2)  # Ajusta el grosor a 2
dev.new()
plot(ecdf(MINUTES_NZ),main='Distribution fitting')
curve(pexp(x, rate = fit_MM_exp$estimate), from = 0, col = "red", add = TRUE,lwd = 2)
curve(pexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2,lwd = 2)
lines(grid, plnorm(grid, fit_MM_lnorm$estimate[1], fit_MM_lnorm$estimate[2]), col = 'blueviolet', lwd = 2)
lines(grid, plnorm(grid, fit_MLE_lnorm$estimate[1], fit_MLE_lnorm$estimate[2]), col = 'cyan4', lwd = 2)
lines(grid, pgamma(grid, fit_MM_gamma$estimate[1], fit_MM_gamma$estimate[2]), col = "deeppink", lwd = 2)
lines(grid, pgamma(grid, fit_MLE_gamma$estimate[1], fit_MLE_gamma$estimate[2]), col = "chartreuse3", lty = 2, lwd = 2)
legend("topleft", c("MM exp", "MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"), col = c("red", "blue", 'blueviolet', 'cyan4', 'deeppink', 'chartreuse3'), lty = c(1, 2, 1, 1, 1, 2), lwd = 2)  # Ajusta el grosor a 2
#Plot all together on the histogram
dev.new()
hist(MINUTES_NZ, freq = FALSE, col = 'white', main = 'Distribution fitting', ylim = c(0, 0.004))
curve(dexp(x, rate = fit_MM_exp$estimate), from = 0, col = "red", add = TRUE,lwd = 2)
curve(dexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2,lwd = 2)
grid = seq(0, 1400, 1)
lines(grid, dlnorm(grid, fit_MM_lnorm$estimate[1], fit_MM_lnorm$estimate[2]), col = 'blueviolet', lwd = 2)
lines(grid, dlnorm(grid, fit_MLE_lnorm$estimate[1], fit_MLE_lnorm$estimate[2]), col = 'cyan4', lwd = 2)
lines(grid, dgamma(grid, fit_MM_gamma$estimate[1], fit_MM_gamma$estimate[2]), col = "deeppink", lwd = 2)
lines(grid, dgamma(grid, fit_MLE_gamma$estimate[1], fit_MLE_gamma$estimate[2]), col = "chartreuse3", lty = 2, lwd = 2)
legend("topright", c("MM exp", "MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"), col = c("red", "blue", 'blueviolet', 'cyan4', 'deeppink', 'chartreuse3'), lty = c(1, 2, 1, 1, 1, 2), lwd = 2)  # Ajusta el grosor a 2
# Plot on the ecdf
dev.new()
plot(ecdf(MINUTES_NZ),main='Distribution fitting')
curve(pexp(x, rate = fit_MM_exp$estimate), from = 0, col = "red", add = TRUE,lwd = 2)
curve(pexp(x, rate = fit_MLE_exp$estimate), from = 0, col = "blue", add = TRUE, lty = 2,lwd = 2)
lines(grid, plnorm(grid, fit_MM_lnorm$estimate[1], fit_MM_lnorm$estimate[2]), col = 'blueviolet', lwd = 2)
lines(grid, plnorm(grid, fit_MLE_lnorm$estimate[1], fit_MLE_lnorm$estimate[2]), col = 'cyan4', lwd = 2)
lines(grid, pgamma(grid, fit_MM_gamma$estimate[1], fit_MM_gamma$estimate[2]), col = "deeppink", lwd = 2)
lines(grid, pgamma(grid, fit_MLE_gamma$estimate[1], fit_MLE_gamma$estimate[2]), col = "chartreuse3", lty = 2, lwd = 2)
legend("topleft", c("MM exp", "MLE exp", "MM lnorm", "MLE lnorm", "MM gamma", "MLE gamma"), col = c("red", "blue", 'blueviolet', 'cyan4', 'deeppink', 'chartreuse3'), lty = c(1, 2, 1, 1, 1, 2), lwd = 2)  # Ajusta el grosor a 2
n=172 #total of people in the sample
e= sum(SPORT_B == 'Si')  # persons who do exercise
p=0.60 #proportion of people that exercise
binom.test(e, n, p, alternative="g")
plot(SPORT_B)
barplot(SPORT_B)
t.test(MINUTES, mu = 326, alternative="g")
dev.new()
boxplot(MINUTES~N_SPORTS)
summary(aov(MINUTES~N_SPORTS))
boxplot(MINUTES~N_SPORTS, col='deepskyblue3')
summary(aov(MINUTES~N_SPORTS))
